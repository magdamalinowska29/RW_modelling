import pandas as pd
from matplotlib import pyplot as plt
from os import listdir
import os

directory = "C:/Users/magda/PycharmProjects/RW_modelling/data/data_action_pe_i/"  # Replace with your directory.

list_trial=listdir(directory)

paths_act=[]

for file_name in list_trial:
    filepath = os.path.join(directory, file_name)
    paths_act.append(filepath)

directory = "C:/Users/magda/PycharmProjects/RW_modelling/data/data_change_pe_i/"  # Replace with your directory.

list_trial=listdir(directory)

paths_change=[]

for file_name in list_trial:
    filepath = os.path.join(directory, file_name)
    paths_change.append(filepath)



def categorise_actions_model_free( choice_count_list, reward_count_list):
    '''a function that categorises actions into explore, exploit and random exploration based on how many times they\
     have been chosen before and how many times they have been rewarded

     :parameter:

        choice_count_list: a list of int, for each possible action, the count of how many times it has been chosen so far

        reward_count_list: a ist of int, for each possible action, the count of how many times it has been rewarded so far'''

    choice_1 = choice_count_list[0]

    choice_count_list[0] = 1000  # just to exclude the '0' action
    # find the least sampled action

    least_samples = min(choice_count_list)  # finding the highest value in the ambiguity list

    # find all indices corresponding to maximum value
    min_val_idx = [i for i in range(len(choice_count_list)) if choice_count_list[i] == least_samples]

    act_explore_free = min_val_idx

    all_actions = range(1, len(choice_count_list))

    leftover_actions = [x for x in all_actions if x not in act_explore_free]

    act_exploit_free = [None]
    act_random_free = [None]

    if len(leftover_actions) == 1:

        # if there is only one action that wasn't classified as exploratory, then treat that action as eploitatory

        # action_exploit=action_exploit.append(leftover_actions[0])
        act_exploit_free[0] = leftover_actions[0]

    elif len(leftover_actions) == 2:

        # if there is more than one acton left, then compare the frequency of reward of each action

        act_1 = leftover_actions[0]
        act_2 = leftover_actions[1]

        freq_1 = reward_count_list[act_1] / choice_count_list[act_1]
        freq_2 = reward_count_list[act_2] / choice_count_list[act_2]

        if freq_1 > freq_2:

            act_exploit_free[0] = act_1
            act_random_free[0] = act_2

        elif freq_2 > freq_1:

            act_exploit_free[0] = act_2
            act_random_free[0] = act_1

        elif freq_1 == freq_2:

            act_exploit_free = [act_1, act_2]

    return act_explore_free, act_exploit_free, act_random_free


fig, axes=plt.subplots(1,1)

explore_count = 0
exploit_count = 0
random_count = 0

for n in range(len(paths_act)):
    path_act = paths_act[n]
    path_change = paths_change[n]

    data_all_trials = pd.read_csv(path_act)

    actions=data_all_trials['Action']
    actions=actions.tolist()

    observations=data_all_trials['Observation']
    observations=observations.tolist()

    observations_new=observations

    for o in range(len(observations)):

        if observations[o]==2:

            observations_new[o]=0

    observations=observations_new



    data_all_env=pd.read_csv(path_change, converters={'Positions':pd.eval,'Probabilities':pd.eval}) #note, here i have to specify that the positions column will be trated as a series of lists no strings

    changepoints=data_all_env['Changepoint']
    changepoints=changepoints.tolist()

    first_changepoint=changepoints[0]

    for change_n in range(len(changepoints)):
        changepoints[change_n] = changepoints[change_n] -first_changepoint
        #changepoints[change_n]=changepoints[change_n] + 1 # substracting the number of the first trial in the condition, so i can run the simulation with the data for each condition


    new_pos=data_all_env['Positions']
    new_pos=new_pos.tolist()

    new_probs=data_all_env['Probabilities']
    new_probs=new_probs.tolist()

    choice_count_list=[0,0,0,0]
    reward_count_list=[0,0,0,0]




    for t in range(len(actions)):

        choice=int(actions[t])
        obs=observations[t]

        if t in changepoints:
            indx = changepoints.index(t)  # get the index of the current changepoint in the changepoint list

            stim_pos_list = new_pos[indx]  # check which position got new stimulus

            if len(stim_pos_list)==3:

                choice_count_list[1]= 0
                choice_count_list[2] = 0
                choice_count_list[3] = 0

                reward_count_list[1]= 0
                reward_count_list[2] = 0
                reward_count_list[3] = 0

            else:

                pos_curr=stim_pos_list[0]

                choice_count_list[pos_curr]=0
                reward_count_list[pos_curr]=0



        act_explore_free, act_exploit_free, act_random_free= categorise_actions_model_free(choice_count_list,reward_count_list)

        if choice in act_explore_free:

            explore_count+=1

        elif choice in act_exploit_free:

            exploit_count+=1

        else:

            random_count+=1

        choice_count_curr=choice_count_list[choice]+1
        choice_count_list[choice]=choice_count_curr

        if int(obs)==1:

            reward_count_curr=reward_count_list[choice]+1
            reward_count_list[choice]=reward_count_curr



print(explore_count)
print(exploit_count)
print(random_count)

x = [1]

x2 = [1.2]
x3 = [1.4]

ax=axes
#ax = plt.subplot(111)
ax.bar(x, [explore_count], width=0.2, color='mediumseagreen', alpha=1, align='center',
               label='explore')

ax.bar(x2, [exploit_count], width=0.2, color='yellow', alpha=1, align='center',
               label='exploit')

ax.bar(x3, [random_count], width=0.2, color='red', alpha=1, align='center',
               label='random')

ax.set_xticks([])
    #ax.set_yticks([0,5,10,15,20,25])


ax.set_ylabel('trial count')


title = 'explore-exploit count Perceptual instrumental'
ax.set_title(title)

ax.legend()
plt.show()











